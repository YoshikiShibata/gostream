// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

type mapStream[type T any] struct {
	nextReq  chan struct{}
	nextData chan T
}

func (ms *mapStream[T]) newGenericStream() *genericStream[T] {
	return &genericStream[T]{
		prevReq:  ms.nextReq,
		prevData: ms.nextData,
		nextReq:  make(chan struct{}),
		nextData: make(chan T),
	}
}

func (ms *mapStream[T]) Filter(predicate Predicate[T]) Stream[T] {
	gs := ms.newGenericStream()

	go gs.filter(predicate)
	return gs
}

func (ms *mapStream[T]) ForEach(action Consumer[T]) {
	ms.nextReq <- struct{}{}
	for t := range ms.nextData {
		action(t)
		ms.nextReq <- struct{}{}
	}
}

func (ms *mapStream[T]) Sorted(less Less[T]) Stream[T] {
	gs := &genericStream[T]{
		nextReq:  ms.nextReq,
		nextData: ms.nextData,
	}
	return gs.Sorted(less)
}

func (ms *mapStream[T]) Peek(action Consumer[T]) Stream[T] {
	gs := ms.newGenericStream()

	go gs.peek(action)
	return gs
}

func (ms *mapStream[T]) Limit(maxSize int) Stream[T] {
	gs := ms.newGenericStream()

	go gs.limit(maxSize)
	return gs
}

func (ms *mapStream[T]) Skip(n int) Stream[T] {
	gs := ms.newGenericStream()

	go gs.skip(n)
	return gs
}

func (ms *mapStream[T]) ToSlice() []T {
	gs := &genericStream[T]{
		nextReq:  ms.nextReq,
		nextData: ms.nextData,
	}
	return gs.ToSlice()
}

func (ms *mapStream[T]) Reduce(
	identity T,
	accumulator BinaryOperator[T],
) T {
	panic("Not Implemented Yet")
}
