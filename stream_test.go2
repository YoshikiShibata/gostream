// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"
)

func TestStream_Map(t *testing.T) {
	defer trace("TestStream_Map")()

	s := StreamFromSlice([]int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10})

	s = s.Filter(func(t int) bool {
		return t&1 != 0
	})

	Map(s, strconv.Itoa).
		ForEach(func(t string) {
			fmt.Printf("t: %q\n", t)
		})
}

func TestStream_Distinct(t *testing.T) {
	defer trace("TestStream_Distinct")()

	s := StreamFromSlice([]int{1, 1, 2, 2, 3, 3, 4, 4, 5, 5,
		6, 6, 7, 7, 8, 8, 9, 9, 10, 10})

	s = Distinct(s).Filter(func(t int) bool {
		return t&1 != 0
	})

	Map(s, strconv.Itoa).
		ForEach(func(t string) {
			fmt.Printf("t: %q\n", t)
		})
}

func TestStream_SortedFunc(t *testing.T) {
	defer trace("TestStream_SortedFunc")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	s = Sorted(s)

	sorted := []int{}
	s.ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
}
