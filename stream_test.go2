// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"reflect"
	"slices"
	"strconv"
	"sync"
	"testing"
)

func TestStream_ForEach(t *testing.T) {
	defer trace("TestStream_ForEach")()

	data := make([]int, 1000)
	for i := 0; i < len(data); i++ {
		data[i] = i
	}

	t.Run("serial", func(t *testing.T) {
		defer trace("TestStream_ForEach/serial")()

		want := 0
		Of(data...).ForEach(func(v int) {
			if v != want {
				t.Fatalf("t is %d, want %d", v, want)
			}
			want++
		})
	})

	t.Run("parallel", func(t *testing.T) {
		defer trace("TestStream_ForEach/parallel")()

		var result []int
		var lock sync.Mutex

		Of(data...).Parallel().ForEach(func(v int) {
			lock.Lock()
			result = append(result, v)
			lock.Unlock()
		})

		lock.Lock()
		defer lock.Unlock()
		if len(result) != len(data) {
			t.Errorf("len(result) is %d, want %d",
				len(result), len(data))
		}

		isSorted := func() bool {
			for i := 1; i < len(result); i++ {
				if result[i-1] > result[i] {
					return false
				}
			}
			return true
		}
		if isSorted() {
			t.Errorf("result(%v) is sorted\n", result)
		}
	})
}

func TestStream_Filter(t *testing.T) {
	defer trace("TestStream_Filter")()

	for _, tc := range [...]struct {
		dataSize int
	}{
		{dataSize: 0},
		{dataSize: 1},
		{dataSize: 1000},
	} {
		var input []int
		var want []int

		for i := 0; i < tc.dataSize; i++ {
			input = append(input, i)
			if i&1 == 1 {
				want = append(want, i)
			}
		}

		t.Run("serial", func(t *testing.T) {
			defer trace("TestStream_Filter/serial")()

			result := Of(input...).Filter(func(t int) bool {
				return t&1 == 1
			}).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})

		t.Run("parallel", func(t *testing.T) {
			defer trace("TestStream_Filter/parallel")()

			result := Of(input...).Parallel().Filter(func(t int) bool {
				return t&1 == 1
			}).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})
	}
}

func TestStream_Map(t *testing.T) {
	defer trace("TestStream_Map")()

	for _, tc := range [...]struct {
		dataSize int
	}{
		{dataSize: 0},
		{dataSize: 1},
		{dataSize: 1000},
	} {
		var input []int
		var want []string

		for i := 0; i < tc.dataSize; i++ {
			input = append(input, i)
			want = append(want, strconv.Itoa(i))
		}

		t.Run("serial", func(t *testing.T) {
			defer trace("TestStream_Map/serial")()

			result := Map(Of(input...), strconv.Itoa).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})

		t.Run("parallel", func(t *testing.T) {
			defer trace("TestStream_Map/parallel")()

			result := Map(Of(input...).Parallel(), strconv.Itoa).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})
	}
}

func TestStream_Distinct(t *testing.T) {
	defer trace("TestStream_Distinct")()

	for _, tc := range [...]struct {
		dataSize int
	}{
		{dataSize: 0},
		{dataSize: 1},
		{dataSize: 1000},
	} {
		var input []int
		var want []int

		for i := 0; i < tc.dataSize; i++ {
			input = append(input, i, i, i)
			want = append(want, i)
		}

		t.Run("serial", func(t *testing.T) {
			defer trace("TestStream_Distinct/serial")()

			result := Distinct(Of(input...)).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})

		t.Run("parallel", func(t *testing.T) {
			defer trace("TestStream_Distinct/parallel")()

			result := Distinct(Of(input...).Parallel()).ToSlice()

			if !slices.Equal(result, want) {
				t.Errorf("result is %v, want %v", result, want)
			}
		})
	}
}

func TestStream_Sorted(t *testing.T) {
	defer trace("TestStream_Sorted")()

	t.Run("serial", func(t *testing.T) {
		defer trace("TestStream_Sorted/serial")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		result := s.Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).ToSlice()

		want := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
		if !slices.Equal(result, want) {
			t.Errorf("result is %v, want %v", result, want)
		}
	})

	t.Run("parallel", func(t *testing.T) {
		defer trace("TestStream_Sorted/parallel")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		result := s.Parallel().Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).ToSlice()

		want := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
		if !slices.Equal(result, want) {
			t.Errorf("result is %v, want %v", result, want)
		}
	})
}

func TestStream_Peek(t *testing.T) {
	defer trace("TestStream_Peek")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
	s = s.Filter(func(t int) bool {
		return true
	})

	var lock sync.Mutex
	var peeked []int
	peekFunc := func(t int) {
		lock.Lock()
		peeked = append(peeked, t)
		lock.Unlock()
	}

	result := s.Peek(peekFunc).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ToSlice()
	want := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	if !slices.Equal(result, want) {
		t.Errorf("result is %v, want %v", result, want)
	}

	lock.Lock()
	wantPeeked := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	if !slices.Equal(peeked, wantPeeked) {
		t.Errorf("peeked is %v, want %v", peeked, wantPeeked)
	}
	lock.Unlock()
}

func TestStream_Limit(t *testing.T) {
	defer trace("TestStream_Limit")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
	s = s.Filter(func(t int) bool {
		return true
	})

	sorted := s.Limit(5).
		Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).ToSlice()

	want := []int{6, 7, 8, 9, 10}
	if !slices.Equal(sorted, want) {
		t.Errorf("sorted is %v, want %v", sorted, want)
	}
}

func TestStream_Skip(t *testing.T) {
	defer trace("TestStream_Skip")()

	t.Run("0", func(t *testing.T) {
		defer trace("TestStream_Skip/0")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		s = s.Filter(func(t int) bool {
			return true
		})

		sorted := s.Skip(0).Limit(5).
			Sorted(func(t1, t2 int) bool {
				return t1 < t2
			}).ToSlice()

		want := []int{6, 7, 8, 9, 10}
		if !slices.Equal(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})

	t.Run("5", func(t *testing.T) {
		defer trace("TestStream_Skip/5")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		s = s.Filter(func(t int) bool {
			return true
		})

		sorted := s.Skip(5).Limit(5).
			Sorted(func(t1, t2 int) bool {
				return t1 < t2
			}).ToSlice()

		want := []int{1, 2, 3, 4, 5}
		if !slices.Equal(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})
}

func TestStream_ToSlice(t *testing.T) {
	defer trace("TestStream_ToSlice")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	s := Of(data...)
	s = s.Filter(func(t int) bool {
		return true
	})

	result := s.ToSlice()
	if !reflect.DeepEqual(result, data) {
		t.Errorf("result is %v, want %v", result, data)
	}
}

func TestStream_Reduce(t *testing.T) {
	defer trace("TestStream_Reduce")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	sum := Of(data...).Reduce(0, func(t1, t2 int) int {
		return t1 + t2
	})
	want := 0
	for _, d := range data {
		want += d
	}
	if sum != want {
		t.Errorf("sum is %d, want %d", sum, want)
	}
}

func TestStream_ReduceToOptional(t *testing.T) {
	defer trace("TestStream_ReduceToOptional")()

	t.Run("emtpy", func(t *testing.T) {
		defer trace("TestStream_ReduceToOptional/empty")()

		sum := Of[int]().ReduceToOptional(func(t1, t2 int) int {
			return t1 + t2
		})
		if sum.IsPresent() {
			t.Errorf("sum.IsPresent() is true, want false")
		}
	})

	t.Run("one", func(t *testing.T) {
		defer trace("TestStream_ReduceToOptional/one")()

		sum := Of[int](777).ReduceToOptional(func(t1, t2 int) int {
			return t1 + t2
		})
		if sum.Get() != 777 {
			t.Errorf("sum.Get() is %d, want 777", sum.Get())
		}
	})

	t.Run("many", func(t *testing.T) {
		defer trace("TestStream_ReduceToOptional/many")()

		data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
		sum := Of(data...).ReduceToOptional(func(t1, t2 int) int {
			return t1 + t2
		})
		want := 0
		for _, d := range data {
			want += d
		}
		if sum.Get() != want {
			t.Errorf("sum is %d, want %d", sum.Get(), want)
		}
	})
}

func TestStream_Min(t *testing.T) {
	defer trace("TestStream_Min")()

	less := func(t1, t2 int) bool { return t1 < t2 }

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_Min/empty")()

		min := Of[int]().Min(less)
		if min.IsPresent() {
			t.Errorf("min.IsPresent() is true, want false")
		}
	})

	t.Run("one", func(t *testing.T) {
		defer trace("TestStream_Min/one")()

		min := Of(777).Min(less)
		if min.Get() != 777 {
			t.Errorf("min.Get() is %d, want 777", min.Get())
		}
	})

	t.Run("many", func(t *testing.T) {
		defer trace("TestStream_Min/many")()

		min := Of(-10, -9, 0, 1, 2, 9, 10).Min(less)
		if min.Get() != -10 {
			t.Errorf("min.Get() is %d, want -10", min.Get())
		}
	})
}

func TestStream_Max(t *testing.T) {
	defer trace("TestStream_Max")()

	less := func(t1, t2 int) bool { return t1 < t2 }

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_Max/empty")()

		min := Of[int]().Max(less)
		if min.IsPresent() {
			t.Errorf("min.IsPresent() is true, want false")
		}
	})

	t.Run("one", func(t *testing.T) {
		defer trace("TestStream_Max/one")()

		min := Of(777).Max(less)
		if min.Get() != 777 {
			t.Errorf("min.Get() is %d, want 777", min.Get())
		}
	})

	t.Run("many", func(t *testing.T) {
		defer trace("TestStream_Max/many")()

		min := Of(-10, -9, 0, 1, 2, 9, 10).Max(less)
		if min.Get() != 10 {
			t.Errorf("min.Get() is %d, want 10", min.Get())
		}
	})
}

func TestStream_Count(t *testing.T) {
	defer trace("TestStream_Count")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	count := Of(data...).Count()

	if count != len(data) {
		t.Errorf("count is %d, want %d", count, len(data))
	}
}

func TestStream_AnyMatch(t *testing.T) {
	defer trace("TestStream_AnyMatch")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_AnyMatch/empty")()

		match := Of[int]().AnyMatch(func(t int) bool {
			return true
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})

	t.Run("10", func(t *testing.T) {
		defer trace("TestStream_AnyMatch/10")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 10
		})

		if !match {
			t.Errorf("match is false, want true")
		}
	})

	t.Run("1", func(t *testing.T) {
		defer trace("TestStream_AnyMatch/1")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 1
		})

		if !match {
			t.Errorf("match is false, want true")
		}
	})

	t.Run("99", func(t *testing.T) {
		defer trace("TestStream_AnyMatch/99")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 99
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})
}

func TestStream_AllMatch(t *testing.T) {
	defer trace("TestStream_AllMatch")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_AllMatch/empty")()

		match := Of[int]().AllMatch(func(t int) bool {
			return false
		})

		if !match {
			t.Errorf("match is true, want false")
		}
	})

	t.Run("allmatch", func(t *testing.T) {
		defer trace("TestStream_AllMatch/allmatch")()

		match := Of(data...).AllMatch(func(t int) bool {
			return 1 <= t && t <= 10
		})

		if !match {
			t.Errorf("match is false, want true")
		}
	})

	t.Run("1", func(t *testing.T) {
		defer trace("TestStream_AllMatch/1")()

		match := Of(data...).AllMatch(func(t int) bool {
			return 2 <= t && t <= 10
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})

	t.Run("10", func(t *testing.T) {
		defer trace("TestStream_AllMatch/10")()

		match := Of(data...).AllMatch(func(t int) bool {
			return 1 <= t && t <= 9
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})
}

func TestStream_NoneMatch(t *testing.T) {
	defer trace("TestStream_NoneMatch")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_NoneMatch/empty")()

		noneMatch := Of[int]().NoneMatch(func(t int) bool {
			return false
		})

		if !noneMatch {
			t.Errorf("noneMatch is true, want false")
		}
	})

	t.Run("match", func(t *testing.T) {
		defer trace("TestStream_NoneMatch/match")()

		noneMatch := Of(data...).NoneMatch(func(t int) bool {
			return t == 5
		})

		if noneMatch {
			t.Errorf("noneMatch is true, want false")
		}
	})

	t.Run("noneMatch", func(t *testing.T) {
		defer trace("TestStream_NoneMatch/1")()

		noneMatch := Of(data...).NoneMatch(func(t int) bool {
			return t < 1 || 10 < t
		})

		if !noneMatch {
			t.Errorf("noneMatch is false, want true")
		}
	})
}

func TestStream_FindFirst(t *testing.T) {
	defer trace("TestStream_FindFirst")()

	t.Run("empty", func(t *testing.T) {
		defer trace("TestStream_FindFirst/empty")()

		min := Of[int]().FindFirst()
		if min.IsPresent() {
			t.Errorf("min.IsPresent() is true, want false")
		}
	})

	t.Run("one", func(t *testing.T) {
		defer trace("TestStream_FindFirst/one")()

		min := Of(777).FindFirst()
		if min.Get() != 777 {
			t.Errorf("min.Get() is %d, want 777", min.Get())
		}
	})

	t.Run("many", func(t *testing.T) {
		defer trace("TestStream_FindFirst/many")()

		min := Of(-10, -9, 0, 1, 2, 9, 10).FindFirst()
		if min.Get() != -10 {
			t.Errorf("min.Get() is %d, want -10", min.Get())
		}
	})
}
