// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"
)

func TestStream_MapFunc(t *testing.T) {
	defer trace("TestStream_MapFunc")()

	s := Of(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

	s = s.Filter(func(t int) bool {
		return t&1 != 0
	})

	var results []string
	Map(s, strconv.Itoa).
		ForEach(func(t string) {
			results = append(results, t)
		})

	want := []string{"1", "3", "5", "7", "9"}
	if !reflect.DeepEqual(results, want) {
		t.Errorf("results is %v, want %v", results, want)
	}
}

func TestStream_DistinctFunc(t *testing.T) {
	defer trace("TestStream_DistinctFunc")()

	s := Of(1, 1, 2, 2, 3, 3, 4, 4, 5, 5,
		6, 6, 7, 7, 8, 8, 9, 9, 10, 10)

	s = Distinct(s).Filter(func(t int) bool {
		return t&1 != 0
	})

	var results []string
	Map(s, strconv.Itoa).
		ForEach(func(t string) {
			results = append(results, t)
		})
	want := []string{"1", "3", "5", "7", "9"}
	if !reflect.DeepEqual(results, want) {
		t.Errorf("results is %v, want %v", results, want)
	}
}

func TestStream_SortedFunc(t *testing.T) {
	defer trace("TestStream_SortedFunc")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)

	s = Sorted(s)

	sorted := []int{}
	s.ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
}

func TestStream_ReducFunc(t *testing.T) {
	defer trace("TestStream_ReduceFunc")()

	t.Run("int", func(t *testing.T) {
		defer trace("TestStream_ReduceFunc/int")()
		var data []int
		for i := 0; i < 1000; i++ {
			data = append(data, i)
		}

		s := Of(data...)

		sum := Reduce(s,
			0,                                   // identity
			func(u, t int) int { return u + t }, // accumulator
			func(u, t int) int { return u + t }, // combiner
		)

		wantSum := 0
		for _, d := range data {
			wantSum += d
		}
		if sum != wantSum {
			t.Errorf("sum is %d, want %d", sum, wantSum)
		}
	})

	t.Run("string", func(t *testing.T) {
		defer trace("TestStream_ReduceFunc/string")()

		var data []string
		for i := 0; i < 1000; i++ {
			data = append(data, strconv.Itoa(i))
		}

		s := Of(data...)

		sum := Reduce(s,
			0, // identity
			func(u int, t string) int {
				tVal, err := strconv.Atoi(t)
				if err != nil {
					panic(fmt.Sprintf("strconv.Atoi(%q) failed: %v", t, err))
				}
				return u + tVal
			}, // accumulator
			func(u, t int) int { return u + t }, // combiner
		)

		wantSum := 0
		for _, d := range data {
			dVal, err := strconv.Atoi(d)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%q) failed: %v", d, err))
			}

			wantSum += dVal
		}
		if sum != wantSum {
			t.Errorf("sum is %d, want %d", sum, wantSum)
		}
	})
}
