// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

type Consumer[T any] func(t T)
type Predicate[T any] func(t T) bool
type Function[T, R any] func(t T) R
type Less[T any] func(t1, t2 T) bool
type BiFunction[T, U, R any] func(t T, u U) R
type BinaryOperator[T any] BiFunction[T, T, T]

type Stream[T any] interface {
	// Filter returns a stream consisting of the elements of this stream
	// that mathe the give predicate.
	Filter(predicate Predicate[T]) Stream[T]

	// map: not supported because "generic method" is not supported:
	//      use Map function instead

	// mapToInt, mapToLong, mapToDouble: no support

	// flatMap: no supported because "generic method" is not supported:
	// TODO: Support FlatMap function

	// flatMapToInt, flatMapToLong, flatMapToDouble: no support

	// distinct: not supported because T is any:
 	// use Distinct function instead

	// sorted(): no supported because no overload is supported:
	// use Sorted() function

	// Sorted returns a stream consisting of the elements of this stream,
	// according to the provided Less.
	Sorted(less Less[T]) Stream[T]

	// Peek returns a stream consisting of the elements of this stream,
	// additionally performing the provided action on each element as elements
	// are consumed from the resulting steam.
	Peek(action Consumer[T]) Stream[T]

	// Limit returns a stream consisting of the elements of this stream,
	// truncated to be no logner than maxSize in length.
	Limit(maxSize int) Stream[T]

	// Skip returns a stream consisting of the remaining elements of this
	// stream after discarding the first n elements of the stream.
	// If this stream contians fewer than n elements then an empty stream
	// will be returned.
	Skip(n int) Stream[T]

	// takeWhile, dropWhile: no supported because I don't understand them yet
	// TODO: support those function

	// ForEach performs an action for each element of this stream.
	ForEach(action Consumer[T])

	// forEachOrdered: no supported yet
	// TODO: implement this

	// ToSlice returns a slice containing the elements of this stream.
	ToSlice() []T

	// Reduce(identity T, accumulator BinaryOperator[T] T
	// Count() int
}
