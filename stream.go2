// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

type Consumer[T any] func(t T)
type Predicate[T any] func(t T) bool
type Function[T, R any] func(t T) R
type Less[T any] func(t1, t2 T) bool
type BiFunction[T, U, R any] func(t T, u U) R
type BinaryOperator[T any] BiFunction[T, T, T]

type Stream[T any] interface {
	// Filter returns a stream consisting of the elements of this stream
	// that mathe the give predicate.
	Filter(predicate Predicate[T]) Stream[T]

	// ForEach performs an action for each element of this stream.
	ForEach(action Consumer[T])

	// Sorted returns a stream consisting of the elements of this stream,
	// according to the provided Less.
	Sorted(less Less[T]) Stream[T]

	// Peek returns a stream consisting of the elements of this stream,
	// additionally performing the provided action on each element as elements
	// are consumed from the resulting steam.
	Peek(action Consumer[T]) Stream[T]

	// Limit returns a stream consisting of the elements of this stream,
	// truncated to be no logner than maxSize in length.
	Limit(maxSize int) Stream[T]

	// Skip(n int) Stream[T]
	// ToSlice() []T
	// Reduce(identity T, accumulator BinaryOperator[T] T
	// Count() int
}
