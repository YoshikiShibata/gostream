// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"math/rand"
	"slices"
	"sort"
	"strconv"
	"testing"
)

func trace(name string) func() {
	fmt.Printf("=== RUN %s\n", name)
	return func() {
		fmt.Printf("=== END %s\n", name)
	}
}

func TestStream_MapFunc(t *testing.T) {
	defer trace("TestStream_MapFunc")()

	s := Of(1, 3, 5, 7, 9)

	result := Map(s, strconv.Itoa).ToSlice()

	want := []string{"1", "3", "5", "7", "9"}
	if !slices.Equal(result, want) {
		t.Errorf("result is %v, want %v", result, want)
	}
}

func TestStream_DistinctFunc(t *testing.T) {
	defer trace("TestStream_DistinctFunc")()

	s := Of(1, 1, 2, 2, 3, 3, 4, 4, 5, 5,
		6, 6, 7, 7, 8, 8, 9, 9, 10, 10)

	result := Distinct(s).ToSlice()

	want := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	if !slices.Equal(result, want) {
		t.Errorf("result is %v, want %v", result, want)
	}
}

func TestStream_SortedFunc(t *testing.T) {
	defer trace("TestStream_SortedFunc")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)

	result := Sorted(s).ToSlice()

	want := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	if !slices.Equal(result, want) {
		t.Errorf("result is %v, want %v", result, want)
	}
}

func TestStream_ReduceFunc(t *testing.T) {
	defer trace("TestStream_ReduceFunc")()

	t.Run("int", func(t *testing.T) {
		defer trace("TestStream_ReduceFunc/int")()

		var data []int
		for i := 0; i < 1000; i++ {
			data = append(data, i)
		}

		s := Of(data...)

		sum := Reduce(s,
			0,                                   // identity
			func(u, t int) int { return u + t }, // accumulator
			func(u, t int) int { return u + t }, // combiner
		)

		wantSum := 0
		for _, d := range data {
			wantSum += d
		}
		if sum != wantSum {
			t.Errorf("sum is %d, want %d", sum, wantSum)
		}
	})

	t.Run("string", func(t *testing.T) {
		defer trace("TestStream_ReduceFunc/string")()

		var data []string
		for i := 0; i < 1000; i++ {
			data = append(data, strconv.Itoa(i))
		}

		s := Of(data...)

		sum := Reduce(s,
			0, // identity
			func(u int, t string) int {
				tVal, err := strconv.Atoi(t)
				if err != nil {
					panic(fmt.Sprintf("strconv.Atoi(%q) failed: %v", t, err))
				}
				return u + tVal
			}, // accumulator
			func(u, t int) int { return u + t }, // combiner
		)

		wantSum := 0
		for _, d := range data {
			dVal, err := strconv.Atoi(d)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%q) failed: %v", d, err))
			}

			wantSum += dVal
		}
		if sum != wantSum {
			t.Errorf("sum is %d, want %d", sum, wantSum)
		}
	})
}

func TestStream_CollectFunc(t *testing.T) {
	defer trace("TestStream_CollectFunc")()

	t.Run("int", func(t *testing.T) {
		defer trace("TestStream_CollectFunc/int")()

		var data []int
		for i := 0; i < 1000; i++ {
			data = append(data, i)
		}

		s := Of(data...)

		// Action
		result := Collect(s,
			func() *[]int { // supplier
				return &[]int{}
			},
			func(r *[]int, t int) { // accumulator
				*r = append(*r, t)
			},
			func(r1, r2 *[]int) { // combiner
				*r1 = append(*r1, *r2...)
			},
		)

		// Check
		if len(*result) != len(data) {
			t.Fatalf("len(*result) is %d, want %d", len(*result), len(data))
		}

		sort.Slice(*result, func(i, j int) bool {
			return (*result)[i] < (*result)[j]
		})

		if !slices.Equal(*result, data) {
			t.Errorf("*result is  %v\n, want %v", *result, data)
		}
	})
}

func TestStream_EmptyFunc(t *testing.T) {
	defer trace("TestStream_EmptyFunc")()

	count := 0
	Empty[int]().ForEach(func(t int) {
		count++
	})

	if count > 0 {
		t.Errorf("count is %d, want 0", count)
	}
}

func TestStream_IterateFunc(t *testing.T) {
	defer trace("TestStream_IterateFunc")()

	lastValue := 0

	Iterate[int](1, func(v int) int {
		return v + 1
	}).Limit(100).ForEach(func(v int) {
		lastValue = v
	})

	if lastValue != 100 {
		t.Errorf("lastValue is %d, want 100", lastValue)
	}
}

func TestStream_IterateNFunc(t *testing.T) {
	defer trace("TestStream_IterateNFunc")()

	lastValue := 0

	IterateN[int](
		1, // seed
		func(v int) bool { // hasNext
			return v <= 100
		},
		func(v int) int { // next
			return v + 1
		}).ForEach(func(v int) {
		lastValue = v
	})

	if lastValue != 100 {
		t.Errorf("lastValue is %d, want 100", lastValue)
	}
}

func TestStream_GenerateFunc(t *testing.T) {
	defer trace("TestStream_GenerateFunc")()

	t.Run("constant", func(t *testing.T) {
		defer trace("TestStream_GenerateFunc/constant")()

		Generate[int](func() int {
			return 777
		}).Limit(100).ForEach(func(v int) {
			if v != 777 {
				t.Errorf("v is %d, want 777", v)
			}
		})
	})

	t.Run("rand", func(t *testing.T) {
		defer trace("TestStream_GenerateFunc/rand")()

		var results []int

		Generate[int](rand.Int).Limit(100).ForEach(func(v int) {
			results = append(results, v)
		})

		sort.Slice(results, func(i, j int) bool {
			return results[i] < results[j]
		})

		preValue := results[0]
		for i := 1; i < len(results); i++ {
			if preValue == results[i] {
				t.Errorf("preValue and results[%d] are %d", i, preValue)
			}
		}
	})
}

func TestStream_ConcatFunc(t *testing.T) {
	defer trace("TestStream_ConcatFunc")()

	a := Iterate[int](1, func(v int) int { return v + 1 }).Limit(100)
	b := Iterate[int](101, func(v int) int { return v + 1 }).Limit(100)
	value := 1
	Concat(a, b).ForEach(func(v int) {
		if v != value {
			t.Fatalf("v is %d, want %d", v, value)
		}
		value++
	})
	if value != 201 {
		t.Errorf("value is %d, want 201", value)
	}
}

func TestStream_FlatMapFunc(t *testing.T) {
	defer trace("TestStream_FlatMapFunc")()

	mapToRuneStream := func(s string) Stream[rune] {
		runes := []rune(s)
		return Of(runes...)
	}

	result := FlatMap(
		Of("abc", "d", "efgh", "ijklmn"),
		mapToRuneStream).ToSlice()
	want := "abcdefghijklmn"

	if len(result) != len(want) {
		t.Errorf("string(result) is %q, want %q", string(result), want)
		t.Fatalf("len(result) is %d, want %d", len(result), len(want))
	}
	if string(result) != want {
		t.Errorf("string(result) is %q, want %q", string(result), want)
	}
}
