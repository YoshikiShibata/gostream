// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"reflect"
	"strconv"
	"testing"
)

func TestSlice(t *testing.T) {
	defer trace("TestSlice")()

	for _, tc := range [...]struct {
		input []int
	}{
		{input: []int{}},
		{input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		stream.ForEach(func(t int) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.input) {
			t.Errorf("result is %v, want %v", result, tc.input)
		}
	}
}

func TestSlice_Filter(t *testing.T) {
	defer trace("TestSlice_Filter")()

	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []int{2, 4, 6, 8, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		stream.Filter(func(t int) bool {
			return t&1 == 0
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestSlice_Map(t *testing.T) {
	defer trace("TestSlice_Map")()

	for _, tc := range [...]struct {
		input []int
		want  []string
	}{
		{
			input: []int{},
			want:  []string{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []string{"1", "2", "3", "4", "5",
				"6", "7", "8", "9", "10"},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []string{}

		Map(stream, strconv.Itoa).
			ForEach(func(t string) {
				result = append(result, t)
			})
		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.input)
		}
	}
}

func TestAsStream_Distinct(t *testing.T) {
	defer trace("TestSlice_Distinct")()

	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		Distinct(stream).ForEach(func(t int) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestSlice_Sorted(t *testing.T) {
	defer trace("TestSlice_Sorted")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	sorted := []int{}
	s.Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
}

func TestSlice_Limit(t *testing.T) {
	defer trace("TestSlice_Sorted")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	sorted := []int{}
	s.Limit(5).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	want := []int{6, 7, 8, 9, 10}
	if !reflect.DeepEqual(sorted, want) {
		t.Errorf("sorted is %v, want %v", sorted, want)
	}
}
