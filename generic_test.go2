// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"
)

func TestGeneric_ForEach(t *testing.T) {
	trace(t, "TestGeneric_ForEach")
	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []int{1, 3, 5, 7, 9},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		stream.Filter(func(t int) bool { // Filter returns a genericStream
			return t&1 == 1
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Filter(t *testing.T) {
	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []int{1, 3, 5, 7, 9},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		stream.Filter(func(t int) bool { // Filter returns a genericStream
			return t&1 == 1
		}).Filter(func(t int) bool {
			return true
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Map(t *testing.T) {
	for _, tc := range [...]struct {
		input []int
		want  []string
	}{
		{
			input: []int{},
			want:  []string{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []string{"1", "3", "5", "7", "9"},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []string{}

		newStream := stream.Filter(func(t int) bool { // Filter returns a genericStream
			return t&1 == 1
		})
		Map(newStream, strconv.Itoa).
			ForEach(func(t string) {
				result = append(result, t)
			})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Distinct(t *testing.T) {
	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		newStream := stream.Filter(func(t int) bool { // Filter returns a genericStream
			return true
		})
		Distinct(newStream).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Sorted(t *testing.T) {
	fmt.Println("TestGeneric_Sorted START")
	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})
	s = s.Filter(func(t int) bool { // Filter returns a genericStream
		return true
	})

	sorted := []int{}
	s.Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
	fmt.Println("TestGeneric_Sorted END")
}

func TestGeneric_Limit(t *testing.T) {
	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})
	s = s.Filter(func(t int) bool { // Filter returns a genericStream
		return true
	})

	sorted := []int{}
	s.Limit(5).
		Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).
		ForEach(func(t int) {
			sorted = append(sorted, t)
		})
	want := []int{6, 7, 8, 9, 10}
	if !reflect.DeepEqual(sorted, want) {
		t.Errorf("sorted is %v, want %v", sorted, want)
	}
}
