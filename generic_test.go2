// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"reflect"
	"strconv"
	"sync"
	"testing"
)

func TestGeneric_ForEach(t *testing.T) {
	defer trace("TestGeneric_ForEach")()

	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []int{1, 3, 5, 7, 9},
		},
	} {
		stream := Of(tc.input...)
		result := []int{}

		stream.Filter(func(t int) bool {
			return t&1 == 1
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Filter(t *testing.T) {
	defer trace("TestGeneric_Filter")()

	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []int{1, 3, 5, 7, 9},
		},
	} {
		stream := Of(tc.input...)
		result := []int{}

		stream.Filter(func(t int) bool {
			return t&1 == 1
		}).Filter(func(t int) bool {
			return true
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Map(t *testing.T) {
	defer trace("TestGeneric_Map")()

	for _, tc := range [...]struct {
		input []int
		want  []string
	}{
		{
			input: []int{},
			want:  []string{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want:  []string{"1", "3", "5", "7", "9"},
		},
	} {
		stream := Of(tc.input...)
		result := []string{}

		newStream := stream.Filter(func(t int) bool {
			return t&1 == 1
		})
		Map(newStream, strconv.Itoa).
			ForEach(func(t string) {
				result = append(result, t)
			})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Distinct(t *testing.T) {
	defer trace("TestGeneric_Distinct")()

	for _, tc := range [...]struct {
		input []int
		want  []int
	}{
		{
			input: []int{},
			want:  []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := Of(tc.input...)
		result := []int{}

		// Filter returns a genericStream
		newStream := stream.Filter(func(t int) bool {
			return true
		})
		Distinct(newStream).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestGeneric_Sorted(t *testing.T) {
	defer trace("TestGeneric_Sorted")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
	s = s.Filter(func(t int) bool {
		return true
	})

	sorted := []int{}
	s.Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
}

func TestGeneric_Peek(t *testing.T) {
	defer trace("TestGeneric_Peek")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
	s = s.Filter(func(t int) bool {
		return true
	})

	var lock sync.Mutex
	var peeked []int
	peekFunc := func(t int) {
		lock.Lock()
		peeked = append(peeked, t)
		lock.Unlock()
	}

	sorted := []int{}
	s.Peek(peekFunc).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}

	lock.Lock()
	wantPeeked := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	if !reflect.DeepEqual(peeked, wantPeeked) {
		t.Errorf("peeked is %v, want %v", peeked, wantPeeked)
	}
	lock.Unlock()
}

func TestGeneric_Limit(t *testing.T) {
	defer trace("TestGeneric_Limit")()

	s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
	s = s.Filter(func(t int) bool {
		return true
	})

	sorted := []int{}
	s.Limit(5).
		Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).
		ForEach(func(t int) {
			sorted = append(sorted, t)
		})
	want := []int{6, 7, 8, 9, 10}
	if !reflect.DeepEqual(sorted, want) {
		t.Errorf("sorted is %v, want %v", sorted, want)
	}
}

func TestGeneric_Skip(t *testing.T) {
	defer trace("TestGeneric_Skip")()

	t.Run("0", func(t *testing.T) {
		defer trace("TestGeneric_Skip/0")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		s = s.Filter(func(t int) bool {
			return true
		})

		sorted := []int{}
		s.Skip(0).Limit(5).
			Sorted(func(t1, t2 int) bool {
				return t1 < t2
			}).
			ForEach(func(t int) {
				sorted = append(sorted, t)
			})
		want := []int{6, 7, 8, 9, 10}
		if !reflect.DeepEqual(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})

	t.Run("5", func(t *testing.T) {
		defer trace("TestGeneric_Skip/5")()

		s := Of(10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
		s = s.Filter(func(t int) bool {
			return true
		})

		sorted := []int{}
		s.Skip(5).Limit(5).
			Sorted(func(t1, t2 int) bool {
				return t1 < t2
			}).
			ForEach(func(t int) {
				sorted = append(sorted, t)
			})
		want := []int{1, 2, 3, 4, 5}
		if !reflect.DeepEqual(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})
}

func TestGeneric_ToSlice(t *testing.T) {
	defer trace("TestGeneric_ToSlice")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	s := Of(data...)
	s = s.Filter(func(t int) bool {
		return true
	})

	result := s.ToSlice()
	if !reflect.DeepEqual(result, data) {
		t.Errorf("result is %v, want %v", result, data)
	}
}

func TestGeneric_Reduce(t *testing.T) {
	defer trace("TestGeneric_Reduce")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	s := Of(data...)
	s = s.Filter(func(t int) bool {
		return true
	})

	sum := s.Reduce(0, func(t1, t2 int) int {
		return t1 + t2
	})
	want := 0
	for _, d := range data {
		want += d
	}
	if sum != want {
		t.Errorf("sum is %d, want %d", sum, want)
	}
}

func TestGeneric_Count(t *testing.T) {
	defer trace("TestGeneric_Count")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	count := Of(data...).Count()

	if count != len(data) {
		t.Errorf("count is %d, want %d", count, len(data))
	}
}

func TestGeneric_AnyMatch(t *testing.T) {
	defer trace("TestGeneric_AnyMatch")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}

	t.Run("empty", func(t *testing.T) {
		defer trace("TestGeneric_AnyMatch/empty")()

		match := Of[int]().AnyMatch(func(t int) bool {
			return true
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})

	t.Run("10", func(t *testing.T) {
		defer trace("TestGeneric_AnyMatch/10")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 10
		})

		if !match {
			t.Errorf("match is false, want true")
		}
	})

	t.Run("1", func(t *testing.T) {
		defer trace("TestGeneric_AnyMatch/1")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 1
		})

		if !match {
			t.Errorf("match is false, want true")
		}
	})

	t.Run("99", func(t *testing.T) {
		defer trace("TestGeneric_AnyMatch/99")()

		match := Of(data...).AnyMatch(func(t int) bool {
			return t == 99
		})

		if match {
			t.Errorf("match is true, want false")
		}
	})
}
