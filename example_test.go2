// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"bufio"
	"fmt"
	"math/rand"
	"os"
	"slices"
	"strings"
	"testing"
	"time"
)

func TestExample_00(t *testing.T) {
	defer trace("TestExample_00")()

	f, err := os.Open("testdata/alice.txt")
	if err != nil {
		t.Fatalf("os.Open failed: %v\n", err)
	}
	defer f.Close()
	input := bufio.NewScanner(f)
	input.Split(bufio.ScanWords)

	var words []string
	for input.Scan() {
		words = append(words, input.Text())
	}

	t.Run("Filter", func(t *testing.T) {
		defer trace("TestExample_00/Filter")()

		count := Of(words...).Parallel().Filter(func(w string) bool {
			return len(w) > 12
		}).Count()
		fmt.Printf("count is %d\n", count)
	})

	t.Run("Map", func(t *testing.T) {
		defer trace("TestExample_00/Map")()

		Map(Of(words...), strings.ToLower).
			Limit(10).ForEach(func(t string) {
			fmt.Printf("%s ", t)
		})
		fmt.Println()
	})

	t.Run("first runes", func(t *testing.T) {
		defer trace("TestExample_00/firstrunes")()

		firstRunes := Map(Of(words...), func(t string) rune {
			for _, r := range t {
				return r
			}
			panic("emty string")
		}).Limit(10).ToSlice()

		fmt.Printf("first runes: %c\n", firstRunes)
	})

	runeStream := func(s string) Stream[rune] {
		runes := []rune(s)
		return Of(runes...)
	}

	t.Run("FlatMap", func(t *testing.T) {
		defer trace("TestExample_00/FlatMap")()

		result := FlatMap(Of("your", "boat"), runeStream).ToSlice()

		resultStr := fmt.Sprintf("%c", result)
		want := "[y o u r b o a t]"

		if resultStr != want {
			t.Errorf("resultStr is %q, want %q", resultStr, want)
		}
	})

	t.Run("Skip", func(t *testing.T) {
		defer trace("TestExample_00/Skip")()

		first100 := Of(words...).Limit(100).ToSlice()
		skip10 := Of(words...).Skip(10).Limit(90).ToSlice()

		if !slices.Equal(skip10, first100[10:]) {
			t.Errorf("skip10 is %v, \nwant %v", skip10, first100[10:])
		}
	})

	t.Run("Concat", func(t *testing.T) {
		defer trace("TestExample_00/Concat")()

		result := Concat(runeStream("Hello"), runeStream("World")).ToSlice()

		resultStr := fmt.Sprintf("%c", result)
		want := "[H e l l o W o r l d]"

		if resultStr != want {
			t.Errorf("resultStr is %q, want %q", resultStr, want)
		}
	})
}

func TestExample_01(t *testing.T) {
	defer trace("TestExample_01")()

	// generate same value repeatedly
	Generate(func() string {
		return "Echo"
	}).Limit(10).ForEach(func(t string) {
		fmt.Printf("%s ", t)
	})
	fmt.Println()
}

func TestExample_02(t *testing.T) {
	defer trace("TestExample_02")()

	// generate random stream
	Generate(rand.Int).Limit(10).ForEach(func(t int) {
		fmt.Printf("%d ", t)
	})
	fmt.Println()

	Generate(rand.Float64).Limit(10).ForEach(func(t float64) {
		fmt.Printf("%e ", t)
	})
	fmt.Println()
}

func TestExample_03(t *testing.T) {
	defer trace("TestExample_03:Iterate")()

	// generate 0, 1, 2, 3, 4, 5, ...
	Iterate(0, func(t int) int {
		return t + 1
	}).Limit(10).ForEach(func(t int) {
		fmt.Printf("%d ", t)
	})
	fmt.Println()
}

func TestExample_04(t *testing.T) {
	defer trace("TestExample_04:FileLines")()

	s, err := FileLines("testdata/alice.txt")
	if err != nil {
		t.Fatalf("LinesOfFile failed: %v", err)
	}
	s.Limit(10).ForEach(func(t string) {
		fmt.Println(t)
	})
}

func TestExample_05(t *testing.T) {
	defer trace("TestExample_05:Peek")()

	Iterate(1.0, func(t float64) float64 {
		return t * 2
	}).Peek(func(t float64) {
		fmt.Printf("Fetching %e\n", t)
	}).Limit(10).ForEach(func(t float64) {
		time.Sleep(time.Second / 2)
	})
}

func TestExample_06(t *testing.T) {
	defer trace("TestExample_05:Distinct")()

	result := Distinct(Of("merrily", "merrily", "merrily", "gently")).ToSlice()

	want := "[merrily gently]"
	resultStr := fmt.Sprintf("%s", result)
	if resultStr != want {
		t.Errorf("resultStr is %q, want %q", resultStr, want)
	}
}
