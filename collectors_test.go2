// Copyright © 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"slices"
	"strconv"
	"strings"
	"testing"
)

func TestCollectors_ToSliceCollector(t *testing.T) {
	defer trace("TestCollectors_ToSliceCollector")()

	data := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}

	result := CollectByCollector(Of(data...), ToSliceCollector[int]())
	if !slices.Equal(result, data) {
		t.Errorf("result is %v, want %v", result, data)
	}
}

func TestCollectors_ToSetCollector(t *testing.T) {
	defer trace("TestCollectors_ToSetCollector")()

	data := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
		1, 3, 5, 7, 9, 10, 10, 10, 10,
		9, 9, 9, 9, 9, 1, 1, 1, 1, 1}

	result := CollectByCollector(Of(data...), ToSetCollector[int]())
	if len(result) != 10 {
		t.Errorf("len(result) is %d, want 10", len(result))
	}
	want := "map[1:true 2:true 3:true 4:true 5:true 6:true 7:true 8:true 9:true 10:true]"
	resultStr := fmt.Sprintf("%v", result)
	if resultStr != want {
		t.Errorf("resultStr is %q, but want %q", resultStr, want)
	}
}

func TestCollectors_JoiningCollector(t *testing.T) {
	defer trace("TestCollectors_JoinigCollector")()

	data := []string{"hello", "world", "こんにちは", "世界"}
	result := CollectByCollector(Of(data...), JoiningCollector(" "))
	want := strings.Join(data, " ")
	if result != want {
		t.Errorf("result is %q, want %q", result, want)
	}
}

func TestCollectors_MappingCollector(t *testing.T) {
	defer trace("TestCollectors_MappingCollector")()

	data := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
	result := CollectByCollector(Of(data...),
		MappingCollector(
			func(t int) string {
				return strconv.Itoa(t)
			},
			JoiningCollector(" ")))

	want := CollectByCollector(
		Map(Of(data...),
			func(t int) string {
				return strconv.Itoa(t)
			}),
		JoiningCollector(" "))

	if result != want {
		t.Errorf("result is %q, want %q", result, want)
	}
}

func TestCollectors_FlatMappingCollector(t *testing.T) {
	defer trace("TestCollectors_FlatMappingCollector")()

	data := []int{0, 10, 20}
	result := CollectByCollector(
		Of(data...),
		FlatMappingCollector(
			func(t int) Stream[string] {
				return Map(
					Iterate(t, func(v int) int { return v + 1 }).Limit(10),
					func(v int) string { return strconv.Itoa(v) },
				)
			},
			JoiningCollector(" "),
		),
	)

	var data2 []string
	for i := 0; i < 30; i++ {
		data2 = append(data2, strconv.Itoa(i))
	}
	want := strings.Join(data2, " ")

	if result != want {
		t.Errorf("result is %q, want %q", result, want)
	}
}
