// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

type sliceStream(type T) struct {
	data     []T
	prevReq  chan struct{}
	prevData chan T
}

func newSliceStreamImpl(type T)(data []T) *sliceStream(T) {
	ss := &sliceStream(T){
		data:     data,
		prevReq:  make(chan struct{}),
		prevData: make(chan T),
	}
	go func() {
		i := 0
		for range ss.prevReq {
			if i == len(ss.data) {
				close(ss.prevData)
				return
			}
			if i < len(ss.data) {
				ss.prevData <- ss.data[i]
				i++
			}
		}
		close(ss.prevData)
	}()

	return ss
}

func (ss *sliceStream(T)) Filter(predicate Predicate(T)) Stream(T) {
	gs := &genericStream(T){
		prevReq:  ss.prevReq,
		prevData: ss.prevData,
		nextReq:  make(chan struct{}),
		nextData: make(chan T),
	}
	go gs.filter(predicate)

	return gs
}

func (ss *sliceStream(T)) Distinct() Stream(T) {
	gs := &genericStream(T){
		prevReq:  ss.prevReq,
		prevData: ss.prevData,
		nextReq:  make(chan struct{}),
		nextData: make(chan T),
	}
	go gs.distinct()

	return gs
	
}

func (ss *sliceStream(T)) ForEach(action Consumer(T)) {
	ss.prevReq <- struct{}{}
	for t := range ss.prevData {
		action(t)
		ss.prevReq <- struct{}{}
	}
}

func AsStream(type T)(slice []T) Stream(T) {
	return newSliceStreamImpl(slice)
}
