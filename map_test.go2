// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"reflect"
	"strconv"
	"testing"
)

func TestMap_ForEach(t *testing.T) {
	for _, tc := range [...]struct {
		input []string
		want  []int
	}{
		{
			input: []string{},
			want:  []int{},
		},
		{
			input: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
			want:  []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		Map(stream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestMap_Filter(t *testing.T) {
	for _, tc := range [...]struct {
		input []string
		want  []int
	}{
		{
			input: []string{},
			want:  []int{},
		},
		{
			input: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
			want:  []int{2, 4, 6, 8, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		Map(stream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).Filter(func(t int) bool {
			return t&1 == 0
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestMap_Map(t *testing.T) {
	for _, tc := range [...]struct {
		input []int
	}{
		{
			input: []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		newStream := Map(stream, strconv.Itoa)
		Map(newStream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).ForEach(func(t int) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.input) {
			t.Errorf("result is %v, want %v", result, tc.input)
		}
	}
}

func TestMap_Distinct(t *testing.T) {
	for _, tc := range [...]struct {
		input []int
		want  []string
	}{
		{
			input: []int{},
			want:  []string{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []string{}

		newStream := Map(stream, strconv.Itoa)
		Distinct(newStream).ForEach(func(t string) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}
