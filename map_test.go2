// Copyright Â© 2020 Yoshiki Shibata. All rights reserved.

package gostream

import (
	"fmt"
	"reflect"
	"strconv"
	"sync"
	"testing"
)

func TestMap_ForEach(t *testing.T) {
	defer trace("TestMap_ForEach")()

	for _, tc := range [...]struct {
		input []string
		want  []int
	}{
		{
			input: []string{},
			want:  []int{},
		},
		{
			input: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
			want:  []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		Map(stream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestMap_Filter(t *testing.T) {
	defer trace("TestMap_Filter")()

	for _, tc := range [...]struct {
		input []string
		want  []int
	}{
		{
			input: []string{},
			want:  []int{},
		},
		{
			input: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
			want:  []int{2, 4, 6, 8, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		Map(stream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).Filter(func(t int) bool {
			return t&1 == 0
		}).ForEach(func(t int) {
			result = append(result, t)
		})

		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestMap_Map(t *testing.T) {
	defer trace("TestMap_Map")()

	for _, tc := range [...]struct {
		input []int
	}{
		{
			input: []int{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []int{}

		newStream := Map(stream, strconv.Itoa)
		Map(newStream, func(t string) int {
			i, err := strconv.Atoi(t)
			if err != nil {
				panic(fmt.Sprintf("strconv.Atoi(%s) failed: %v", t, err))
			}
			return i
		}).ForEach(func(t int) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.input) {
			t.Errorf("result is %v, want %v", result, tc.input)
		}
	}
}

func TestMap_Distinct(t *testing.T) {
	defer trace("TestMap_Distinct")()

	for _, tc := range [...]struct {
		input []int
		want  []string
	}{
		{
			input: []int{},
			want:  []string{},
		},
		{
			input: []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
				1, 2, 3, 4, 5, 6, 7, 8, 9, 10},
			want: []string{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"},
		},
	} {
		stream := StreamFromSlice(tc.input)
		result := []string{}

		newStream := Map(stream, strconv.Itoa)
		Distinct(newStream).ForEach(func(t string) {
			result = append(result, t)
		})
		if !reflect.DeepEqual(result, tc.want) {
			t.Errorf("result is %v, want %v", result, tc.want)
		}
	}
}

func TestMap_Sorted(t *testing.T) {
	defer trace("TestMap_Sorted")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	sorted := []int{}
	Map(s, func(t int) int {
		return t
	}).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}
}

func TestMap_Peek(t *testing.T) {
	defer trace("TestMap_Peek")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	var lock sync.Mutex
	var peeked []int
	peekFunc := func(t int) {
		lock.Lock()
		peeked = append(peeked, t)
		lock.Unlock()
	}

	sorted := []int{}
	Map(s, func(t int) int {
		return t
	}).Peek(peekFunc).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	if !reflect.DeepEqual(sorted, []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}) {
		t.Errorf("sorted is not sorted: %v", sorted)
	}

	lock.Lock()
	wantPeeked := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	if !reflect.DeepEqual(peeked, wantPeeked) {
		t.Errorf("peeked is %v, want %v", peeked, wantPeeked)
	}
	lock.Unlock()
}

func TestMap_Limit(t *testing.T) {
	defer trace("TestMap_Limit")()

	s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

	sorted := []int{}
	Map(s, func(t int) int {
		return t
	}).Limit(5).Sorted(func(t1, t2 int) bool {
		return t1 < t2
	}).ForEach(func(t int) {
		sorted = append(sorted, t)
	})
	want := []int{6, 7, 8, 9, 10}
	if !reflect.DeepEqual(sorted, want) {
		t.Errorf("sorted is %v, want %v", sorted, want)
	}
}

func TestMap_Skip(t *testing.T) {
	defer trace("TestMap_Skip")()

	t.Run("0", func(t *testing.T) {
		defer trace("TestMap_Skip/0")()

		s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

		sorted := []int{}
		Map(s, func(t int) int {
			return t
		}).Skip(0).Limit(5).Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).ForEach(func(t int) {
			sorted = append(sorted, t)
		})
		want := []int{6, 7, 8, 9, 10}
		if !reflect.DeepEqual(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})

	t.Run("5", func(t *testing.T) {
		defer trace("TestMap_Skip/0")()

		s := StreamFromSlice([]int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1})

		sorted := []int{}
		Map(s, func(t int) int {
			return t
		}).Skip(5).Limit(5).Sorted(func(t1, t2 int) bool {
			return t1 < t2
		}).ForEach(func(t int) {
			sorted = append(sorted, t)
		})
		want := []int{1, 2, 3, 4, 5}
		if !reflect.DeepEqual(sorted, want) {
			t.Errorf("sorted is %v, want %v", sorted, want)
		}
	})
}

func TestMap_ToSlice(t *testing.T) {
	defer trace("TestMap_ToSlice")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	s := StreamFromSlice(data)

	result := Map(s, func(t int) int {
		return t
	}).ToSlice()
	if !reflect.DeepEqual(result, data) {
		t.Errorf("result is %v, want %v", result, data)
	}
}

func TestMap_Reduce(t *testing.T) {
	defer trace("TestMap_Reduce")()

	data := []int{10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
	s := StreamFromSlice(data)
	sum := Map(s, func(t int) int {
		return t
	}).Reduce(0, func(t1, t2 int) int {
		return t1 + t2
	})

	want := 0
	for _, d := range data {
		want += d
	}
	if sum != want {
		t.Errorf("sum is %d, want %d", sum, want)
	}
}
